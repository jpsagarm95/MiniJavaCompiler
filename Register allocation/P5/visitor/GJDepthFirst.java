//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import visitor.GJNoArguDepthFirst.Register;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }
   
   public HashMap<Integer, Register> regis = null;
   
   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   //new
   public int saveArg = 0;
   public int spillArg = 0; 
   public HashMap<Integer, String>registersNames = new HashMap<Integer, String>();
   public HashMap<String, HashMap<Integer, Register>> Reg = null;
   public boolean v0InUse = false;
   public boolean v1InUse = false;
   public int totalSpill = 0;
   //new
   
   
   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
//      for(int i = 0 ; i < 10 ; i++)
//    	  System.out.println();
      // filling registers names for corresponding integers
      registersNames.put(0,"t0");
      registersNames.put(1,"t1");
      registersNames.put(2,"t2");
      registersNames.put(3,"t3");
      registersNames.put(4,"t4");
      registersNames.put(5,"t5");
      registersNames.put(6,"t6");
      registersNames.put(7,"t7");
      registersNames.put(8,"t8");
      registersNames.put(9,"t9");
      registersNames.put(10,"s0");
      registersNames.put(11,"s1");
      registersNames.put(12,"s2");
      registersNames.put(13,"s3");
      registersNames.put(14,"s4");
      registersNames.put(15,"s5");
      registersNames.put(16,"s6");
      registersNames.put(17,"s7");
      // filling registers names for corresponding integers
      Reg =  (HashMap<String, HashMap<Integer, Register>>)argu;
      
//      Iterator<String> itrOfReg = Reg.keySet().iterator();
//      while(itrOfReg.hasNext()){
//    	  String element = itrOfReg.next();
//    	  System.out.println();
//	    	System.out.println(element);
//	    	System.out.println();
//    	  Iterator<Integer> itr = Reg.get(element).keySet().iterator();
//	  	    while(itr.hasNext()){
//	  	    	Integer blue = itr.next();
//	  	    	Register hel = Reg.get(element).get(blue);
//	  	    	
//	  	    	System.out.println(hel.name + " " + hel.regNum + " " + hel.sorr);
//	  	    }
//	  	    System.out.println();
//      }
//      Iterator<Integer> itr = test.get(element).keySet().iterator();
//	    while(itr.hasNext()){
//	    	Integer blue = itr.next();
//	    	Register hel = finalReg.get(element).get(blue);
//	    	System.out.println(hel.name + " " + hel.regNum + " " + hel.sorr);
//	    }
      regis = Reg.get("main");
      int number = 0;
      Iterator<Integer> itrOfRegis = regis.keySet().iterator();
      while(itrOfRegis.hasNext()){
    	  Integer element = itrOfRegis.next();
    	  Register hold = regis.get(element);
    	  if(hold.sorr.equals("s")){
    		  number = number + 1;
    		  totalSpill = totalSpill + 1;
    	  }else{
//    		  if(hold.regNum >= 10){
//    			  if(temp.contains(hold.regNum)){
//    				  
//    			  }else{
//    				  temp.add(hold.regNum);
//    			  }
//    		  }
    	  }
      }
      
      number = number + 18;
      System.out.println(" MAIN [0]["+ number +"][" + regis.get(-1).regNum + "] " );
      spillArg = 18;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println(" END ");
      System.out.println();
      regis = null;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("// Number of  vars after packing = 0; Number of Spilled vars = " +  totalSpill);
      return _ret;
   }
   public boolean printLabel = true;
   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      printLabel = false;
      String funcName = (String)n.f0.accept(this, argu);
      printLabel = true;
      regis = Reg.get(funcName);
      // new
      saveArg = 0;
      ArrayList<Integer> temp = new ArrayList<Integer>();
      int number = 0;
      if(Integer.parseInt(n.f2.f0.tokenImage) > 4){
    	  number = Integer.parseInt(n.f2.f0.tokenImage) - 4;
    	  saveArg = number;
      }
      spillArg = saveArg + 18 ;
      Iterator<Integer> itrOfRegis = regis.keySet().iterator();
      while(itrOfRegis.hasNext()){
    	  Integer element = itrOfRegis.next();
    	  Register hold = regis.get(element);
    	  if(hold.sorr.equals("s")){
    		  number = number + 1;
    		  totalSpill = totalSpill + 1;
    	  }else{
//    		  if(hold.regNum >= 10){
//    			  if(temp.contains(hold.regNum)){
//    				  
//    			  }else{
//    				  temp.add(hold.regNum);
//    			  }
//    		  }
    	  }
      }
      
      number = number + 18;
      
      // new
      int element = regis.get(-1).regNum;
      System.out.println();
      System.out.println(funcName + " [" + n.f2.f0.tokenImage + "][" + number + "][" + element + "] ");
      for(int i = 10 ; i < 18 ; i++){
    	  System.out.println(" ASTORE SPILLEDARG " + (saveArg + i)+ " s" + (i - 10) + " " );
      }
      
      // For arguments a and Passargs
      for(int i = 0 ; i < Integer.parseInt(n.f2.f0.tokenImage); i++){
    	  if(i < 4){
    		  if(!regis.containsKey(i)){
    			  continue;
    		  }
    		  Register hold = regis.get(i);
    		  if(hold.sorr.equals("r")){
    			  System.out.println(" MOVE " + registersNames.get(hold.regNum) + " a" + i + " ");
    		  }else{
    			  System.out.println(" ASTORE SPILLEDARG " + (spillArg + hold.regNum ) + " a" + i + " ");
    		  }
    	  }else{
    		  Register hold = regis.get(i);
    		  if(hold.sorr.equals("r")){
    			  System.out.println(" ALOAD " + registersNames.get(hold.regNum) + " SPILLEDARG " + (i - 4) + " ");
    		  }else{
    			  System.out.println(" ALOAD v0 " + " SPILLEDARG " + (i - 4) + " ");
    			  System.out.println(" ASTORE SPILLEDARG " + (spillArg + hold.regNum ) + " v0 ");
    		  }
    	  }
      }
      //
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      for(int i = 10 ; i < 18 ; i++){
    	  System.out.println(" ALOAD s"+ (i - 10) + " SPILLEDARG " + (saveArg + i) + " ");
      }
      System.out.println(" END ");
      System.out.println();
      regis = null;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" ERROR ");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp = Integer.parseInt((String)n.f1.accept(this, argu));
      printLabel = false;
      String label = (String)n.f2.accept(this, argu);
      printLabel = true;
      Register hold = regis.get(temp);
      if(hold.sorr.equals("r")){
    	  System.out.println(" CJUMP " + registersNames.get(hold.regNum) + " " + label + " ");
      }else{
    	  System.out.println(" ALOAD v1 SPILLEDARG "+ (spillArg + hold.regNum) + " ");
    	  System.out.println(" CJUMP v1 " + label + " " );
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      printLabel = false;
      String label = (String)n.f1.accept(this, argu);
      printLabel = true;
      System.out.println(" JUMP " + label + " ");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp1 = Integer.parseInt((String)n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      Integer temp2 = Integer.parseInt((String)n.f3.accept(this, argu));
      Register liv1 = regis.get(temp1);
      Register liv2 = regis.get(temp2);
      if(liv1.sorr.equals("r")){
    	  if(liv2.sorr.equals("r")){
    		  System.out.println(" HSTORE " + registersNames.get(liv1.regNum) + " " + n.f2.f0.tokenImage + " " + registersNames.get(liv2.regNum));
    	  }else{
    		  System.out.println(" ALOAD v0 SPILLEDARG "+ (spillArg + liv2.regNum) + " ");
    		  System.out.println(" HSTORE "+ registersNames.get(liv1.regNum) + " " + n.f2.f0.tokenImage + " v0 "  );
    	  }
      }else{
    	  if(liv2.sorr.equals("r")){
    		  System.out.println(" ALOAD v0 SPILLEDARG "+ (spillArg + liv1.regNum) + " ");
    		  System.out.println(" HSTORE v0 " + n.f2.f0.tokenImage + " " + registersNames.get(liv2.regNum));
    	  }else{
    		  System.out.println(" ALOAD v0 SPILLEDARG "+ (spillArg + liv1.regNum) + " ");
    		  System.out.println(" ALOAD v1 SPILLEDARG "+ (spillArg + liv2.regNum) + " ");
    		  System.out.println(" HSTORE v0 " + n.f2.f0.tokenImage + " v1 ");
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp1 = Integer.parseInt((String)n.f1.accept(this, argu));
      Integer temp2 = Integer.parseInt((String)n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      if(!regis.containsKey(temp1)){
    	  return _ret;
      }
      Register liv1 = regis.get(temp1);
      Register liv2 = regis.get(temp2);
      if(liv1.sorr.equals("r")){
    	  if(liv2.sorr.equals("r")){
    		  System.out.println(" HLOAD " + registersNames.get(liv1.regNum) + " " + registersNames.get(liv2.regNum) + " " + n.f3.f0.tokenImage  + " ");
    	  }else{
    		  System.out.println(" ALOAD v0 SPILLEDARG "+ (spillArg + liv2.regNum) + " ");
    		  System.out.println(" HLOAD "+ registersNames.get(liv1.regNum) + " v0 " + n.f3.f0.tokenImage   + " ");
    	  }
      }else{
    	  if(liv2.sorr.equals("r")){
    		  
    		  System.out.println(" HLOAD v0 "  + registersNames.get(liv2.regNum) + " " + n.f3.f0.tokenImage + " ");
    		  System.out.println(" ASTORE SPILLEDARG "+ (spillArg + liv1.regNum) + " v0 ");
    	  }else{
    		  
    		  System.out.println(" ALOAD v1 SPILLEDARG "+ (spillArg + liv2.regNum) + " ");
    		  System.out.println(" HLOAD v0 " +  " v1 " + n.f3.f0.tokenImage + " ");
    		  System.out.println(" ASTORE SPILLEDARG "+ (spillArg + liv1.regNum) + " v0 ");
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp = Integer.parseInt((String)n.f1.accept(this, argu));
      String exp = (String)n.f2.accept(this, argu);
      Register liv = regis.get(temp);
      if(!regis.containsKey(temp)){
    	  return _ret;
      }
      if(liv.sorr.equals("r")){
    	  System.out.println(" MOVE " + registersNames.get(liv.regNum) + " " + exp + " ");
      }else{
    	  if(v0InUse){
    		  System.out.println(" MOVE v1 "+ exp + " ");
	    	  System.out.println(" ASTORE SPILLEDARG "+ (spillArg + liv.regNum) + " v1 " );
    	  }else{
	    	  System.out.println(" MOVE v0 "+ exp + " ");
	    	  System.out.println(" ASTORE SPILLEDARG "+ (spillArg + liv.regNum) + " v0 " );
    	  }
      }
      v0InUse = false;
      v1InUse = false;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String)n.f1.accept(this, argu);
      System.out.println(" PRINT " + exp + " ");
      v0InUse = false;
      v1InUse = false;
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exp = (String)n.f3.accept(this, argu);
      System.out.println(" MOVE v0 " + exp + " ");
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      argu = (A)new ArrayList<Integer>(); 
      n.f3.accept(this, argu);
      ArrayList<Integer> hold = (ArrayList<Integer>)argu;
      argu = null;
      for(int i = 0 ; i < 10 ; i++){
    	  System.out.println(" ASTORE SPILLEDARG " + (saveArg + i) + " t" + i + " ");
      }
      int index = 0;
      Iterator<Integer> itr = hold.iterator();
      while(itr.hasNext()){
    	  Integer element = itr.next();
    	  Register value = regis.get(element);
    	  String reg ;
    	  if(value.sorr.equals("r")){
    		  reg =  " " + registersNames.get(value.regNum) + " ";
    	  }else{
    		  System.out.println(" ALOAD v0 " + " SPILLEDARG " +(spillArg + value.regNum) + " ");
    		  reg = " v0 ";
    	  }
    	  if(index < 4){
	    	  System.out.println(" MOVE a" + index + " " + reg + " ");
    	  }else{
    		  System.out.println(" PASSARG " + (index - 3) + " " + reg + " ");
    	  }
    	  index++;
      }
      n.f4.accept(this, argu);
      System.out.println(" CALL " + exp + " ");
      for(int i = 0 ; i < 10 ; i++){
    	  System.out.println(" ALOAD t" + i + " SPILLEDARG " + (saveArg + i) + " ");
      }
      _ret = (R)" v0 ";
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String)n.f1.accept(this, argu);
      _ret = (R)(" HALLOCATE " + exp + " ");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String)n.f0.accept(this, argu);
      Integer temp = Integer.parseInt((String)n.f1.accept(this, argu));
      String exp = (String)n.f2.accept(this, argu);
      Register liv = regis.get(temp);
      
      if(liv.sorr.equals("r")){    	  
    		  _ret = (R)(" " + op + " " + registersNames.get(liv.regNum) + " " + exp + " ");
      }else{
    	  if(v0InUse = false){
    		  System.out.println(" ALOAD v1 SPILLEDARG " + (spillArg + liv.regNum ) );
    		  _ret = (R)(" " + op + " v1 " + exp + " " );
    		  v1InUse = true;
    	  }else{
    		  System.out.println(" ALOAD v0 SPILLEDARG " +( spillArg + liv.regNum ) );
    		  _ret = (R)(" " + op + " v0 " + exp + " " );
    		  v0InUse = true;
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      switch(n.f0.which){
      case 0:	_ret = (R)" LT ";
      			break;
      case 1:	_ret = (R)" PLUS ";
				break;
      case 2:	_ret = (R)" MINUS ";
				break;
      case 3:	_ret = (R)" TIMES ";
				break;
      }
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      if(n.f0.which == 1){
    	  _ret = (R)n.f0.accept(this, argu);
      }else if(n.f0.which == 0){
    	  Integer temp  = Integer.parseInt((String)n.f0.accept(this, argu));
    	  Register live = regis.get(temp);
    	  if(live.sorr.equals("r")){
    		  _ret = (R)(registersNames.get(live.regNum));
    	  }else{
    		  if(v0InUse){
    			  System.out.println(" ALOAD v1 "+ " SPILLEDARG "+ (spillArg + live.regNum) + " ");
    			  _ret = (R)" v1 ";
    			  v1InUse = true;
    		  }else{
    			  System.out.println(" ALOAD v0 "+ " SPILLEDARG "+ (spillArg + live.regNum) + " ");
    			  _ret = (R)" v0 ";
    			  v0InUse = true;
    		  }
    	  }
      }else{
    	  printLabel = false;
    	  _ret = (R)n.f0.accept(this, argu);
    	  printLabel = true;
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = (R)n.f1.f0.tokenImage;
      if(argu instanceof ArrayList){
    	  ((ArrayList) argu).add(Integer.parseInt((String)_ret));
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.tokenImage;
      if(printLabel){
    	  System.out.println(" " + (String)_ret + " ");
      }
      return _ret;
   }

}
