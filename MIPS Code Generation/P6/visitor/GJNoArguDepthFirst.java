//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   
   public int oneint;
   public int twoint;
   public int threeint;
   
   
   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> VariablePackingInfo()
    * f14 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String intone = (String)n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      String inttwo = (String)n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      String intthree = (String)n.f8.accept(this);
      n.f9.accept(this);
      int num = 4;
      int Intone = Integer.parseInt(intone);
      int Inttwo = Integer.parseInt(inttwo);
      int Intthree = Integer.parseInt(intthree);
      
      oneint = Intone;
      twoint = Inttwo;
      threeint = Intthree;
      
      if(Intthree > 4){
    	  num = num +( ( Intthree - 4 ) * 4 );
      }
      
      num = num + (Inttwo * 4);
      
      System.out.println(".text \n" +
        		".globl		"+ " main " + " \n" +
        			" main" +	": \n" +
        					
        					"move $fp, $sp \n" +
        					"subu $sp, $sp, " + num  + " \n" +
        							"sw $ra, -4($fp) \n");
      
      n.f10.accept(this);
      /*
       * 
       * lw $ra, -4($fp)
       * addu $sp, $sp, 4
       * j $ra
       */
      
      System.out.println("lw $ra, -4($fp) \n" +
      		"addu $sp, $sp, " + num + " \n" +
      				"j $ra \n" );
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      
      System.out.println(".text \n" +
      		".globl _halloc \n" +
      		"_halloc: \n" +
      		"li $v0, 9 \n" +
      		"syscall \n" +
      		"j $ra \n" +
      		".text \n" +
      		".globl _print \n" +
      		"_print: \n" +
      		"li $v0, 1 \n" +
      		"syscall \n" +
      		"la $a0, newl \n" +
      		"li $v0, 4 \n" +
      		"syscall \n" +
      		"j $ra \n" +
      		".data \n" +
      		".align   0 \n" +
      		"newl:    .asciiz \"\\n\"  \n" +
      		".data \n" +
      		".align   0 \n" +
      		"str_er:  .asciiz \" ERROR: abnormal termination\\n\"  \n");
      return _ret;
   }
   boolean IsLabel = false;
   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public R visit(Procedure n) {
      R _ret=null;
      IsLabel = true;
      String label = (String)n.f0.accept(this);
      IsLabel = false;
      n.f1.accept(this);
      String intone = (String)n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      String inttwo = (String)n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      String intthree = (String)n.f8.accept(this);
      n.f9.accept(this);
      
      int num = 8;
      int Intone = Integer.parseInt(intone);
      int Inttwo = Integer.parseInt(inttwo);
      int Intthree = Integer.parseInt(intthree);
      
      oneint = Intone;
      twoint = Inttwo;
      threeint = Intthree;
      
      if(Intthree > 4){
    	  num = num +( ( Intthree - 4 ) * 4 );
      }
      
      num = num + (Inttwo * 4);
      
      System.out.println(".text \n" +
      		".globl		"+ label + " \n" +
      			label +	": \n" +
      					"sw $fp, -8($sp) \n" +
      					"move $fp, $sp \n" +
      					"subu $sp, $sp, " + num  + " \n" +
      							"sw $ra, -4($fp) \n"); 
      n.f10.accept(this);
      System.out.println("  lw $ra, -4($fp) \n" +
      		"lw $fp, "+ (num - 8) +"($sp) \n" +
      				"addu $sp, $sp, " + num + " \n" +
      						"j $ra ");
      n.f11.accept(this);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      /*
       * li $v0, 4
         la $a0, str_er
         syscall
         li $v0, 10
         syscall
       */
      
      System.out.println("li $v0, 4 \n" +
      		"la $a0, str_er \n" +
      		"syscall \n" +
      		"li $v0, 10 \n" +
      		"syscall ");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg = (String)n.f1.accept(this);
      IsLabel = true;
      String label = (String)n.f2.accept(this);
      IsLabel = false;
      System.out.println("beqz " + reg + " " + label + " ");
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      IsLabel = true;
      String label = (String)n.f1.accept(this);
      IsLabel = false;
      System.out.println(" b " + label +  " ");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg1 = (String)n.f1.accept(this);
      String intg = (String)n.f2.accept(this);
      String reg2 = (String)n.f3.accept(this);
      System.out.println("sw " + reg2 + ", " + intg + "(" + reg1 + ")" );
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg1 = (String)n.f1.accept(this);
      String reg2 = (String)n.f2.accept(this);
      String intg = (String)n.f3.accept(this);
      System.out.println("lw " + reg1 + " " + intg + "(" + reg2 + ")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg = (String)n.f1.accept(this);
      String exp = (String)n.f2.accept(this);
      if(n.f2.f0.which == 1){
    	  String a[] = exp.split(" ", 2);
    	  System.out.println(" " + a[0] + " " + reg + ", " + a[1] + " ");
      }else{
	      if(isInteger(exp)){
	    	  System.out.println(" li " + reg + " " + exp + " ");
	      }else{
	    	  if(exp.charAt(0) == '$')
	    		  System.out.println(" move " + reg + " " + exp + " ");
	    	  else
	    		  System.out.println(" la " + reg + " " + exp + " ");
	      }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String exp = (String)n.f1.accept(this);
      if(isInteger(exp)){
    	  System.out.println("li $a0 " + exp + " \n" +
  	      		" jal _print ");
      }else{
	      System.out.println("move $a0 " + exp + " \n" +
	      		" jal _print ");
      }
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String reg = (String)n.f1.accept(this);
      String arg = (String)n.f2.accept(this);
      int num = 0;
      if(threeint > 4){
    	  num = num + threeint - 4;
    	  num = num * 4;
      }
      num = num + Integer.parseInt(arg)*4;
      if( Integer.parseInt(arg) < (oneint - 4) ){
    	  System.out.println(" lw " + reg + ", " + Integer.parseInt(arg)*4 + "($fp) ");
      }else{
    	  System.out.println("lw " + reg + ", " + num +"($sp) ");
   	  }
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String arg = (String)n.f1.accept(this);
      String reg = (String)n.f2.accept(this);
      System.out.println("sw " + reg + ", " + Integer.parseInt(arg)*4 + "($sp) ");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String intg = (String)n.f1.accept(this);
      String reg = (String)n.f2.accept(this);
      int value = Integer.parseInt(intg);
      value = (value - 1)*4;
      //sw $s3, 0($sp)
      System.out.println(" sw " + reg + ", " + value + "($sp) ");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String exp = (String)n.f1.accept(this);
      System.out.println(" jalr " + exp + " ");
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      String exp = (String)n.f1.accept(this);
      if(isInteger(exp)){
    	  System.out.println(" li $a0 " + exp + " ");
      }else{
    	  System.out.println(" move $a0 " + exp + " ");
      }
      System.out.println(" jal _halloc ");
      _ret = (R)"$v0";
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      n.f0.accept(this);
      String reg = (String)n.f1.accept(this);
      String exp = (String)n.f2.accept(this);
      String code = new String();
      boolean isInt = false;
      if(n.f2.f0.which == 1){
    	  isInt = true;
      }
      switch(n.f0.f0.which){
      case 0:
    	  if(isInt){
    		  code = "slti " + reg + ", " + exp + " ";
    	  }else{
    		  code = "slt " + reg + ", " + exp + " ";
    	  }
    	  break;
      case 1:
    	  if(isInt){
    		  code = "addi " + reg + ", " + exp + " ";
    	  }else{
    		  code = "add " + reg + ", " + exp + " ";
    	  }
    	  break;
      case 2:
    	  code = "subu " + reg + ", " + exp + " ";
    	  break;
      case 3:
    	  code = "mul " + reg + ", " + exp + " ";
    	  break;
      case  4:
    	  if(isInt){
    		  code = "ori " + reg + ", " + exp + " ";
    	  }else{
    		  code = "or " + reg + ", " + exp + " ";
    	  }
    	  break;
      case  5:
    	  if(isInt){
    		  code = "andi " + reg + ", " + exp + " ";
    	  }else{
    		  code = "and " + reg + ", " + exp + " ";
    	  }
    	  break;
      case  6:
    	  if(isInt){
    		  code = "sll " + reg + ", " + exp + " ";
    	  }else{
    		  code = "sllv " + reg + ", " + exp + " ";
    	  }
    	  break;
      case  7:
    	  if(isInt){
    		  code = "srl " + reg + ", " + exp + " ";
    	  }else{
    		  code = "srlv " + reg + ", " + exp + " ";
    	  }
    	  break;
      case  8:
    	  if(isInt){
    		  code = "xori " + reg + ", " + exp + " ";
    	  }else{
    		  code = "xor " + reg + ", " + exp + " ";
    	  }
    	  break;
   }
      _ret = (R)code;
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "BITOR"
    *       | "BITAND"
    *       | "LSHIFT"
    *       | "RSHIFT"
    *       | "BITXOR"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      _ret = (R)n.f1.f0.tokenImage;// has to change it
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      if(n.f0.which == 2){
    	  IsLabel = true;
      }
      _ret = n.f0.accept(this);
      if(n.f0.which == 2){
    	  IsLabel = false;
      }
      return _ret;
   }

   
   public static boolean isInteger(String s) {
	    try { 
	        Integer.parseInt(s); 
	    } catch(NumberFormatException e) { 
	        return false; 
	    }
	    // only got here if we didn't return false
	    return true;
	}
   
   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      R _ret=null;
      n.f0.accept(this);
      switch (n.f0.which) {
	case 0:
		_ret = (R)"$a0";
		break;
	case 1:
		_ret = (R)"$a1";
		break;
	case 2:
		_ret = (R)"$a2";
		break;
	case 3:
		_ret = (R)"$a3";
		break;
	case 4:
		_ret = (R)"$t0";
		break;
	case 5:
		_ret = (R)"$t1";
		break;
	case 6:
		_ret = (R)"$t2";
		break;
	case 7:
		_ret = (R)"$t3";
		break;
	case 8:
		_ret = (R)"$t4";
		break;
	case 9:
		_ret = (R)"$t5";
		break;
	case 10:
		_ret = (R)"$t6";
		break;
	case 11:
		_ret = (R)"$t7";
		break;
	case 12:
		_ret = (R)"$s0";
		break;
	case 13:
		_ret = (R)"$s1";
		break;
	case 14:
		_ret = (R)"$s2";
		break;
	case 15:
		_ret = (R)"$s3";
		break;
	case 16:
		_ret = (R)"$s4";
		break;
	case 17:
		_ret = (R)"$s5";
		break;
	case 18:
		_ret = (R)"$s6";
		break;
	case 19:
		_ret = (R)"$s7";
		break;
	case 20:
		_ret = (R)"$t8";
		break;
	case 21:
		_ret = (R)"$t9";
		break;
	case 22:
		_ret = (R)"$v0";
		break;
	case 23:
		_ret = (R)"$v1";
		break;
	}
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
      if(!IsLabel){
    	  System.out.println(n.f0.tokenImage + ":");
      }
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "// Number of  vars after packing ="
    * f1 -> IntegerLiteral()
    * f2 -> "; Number of Spilled vars ="
    * f3 -> IntegerLiteral()
    */
   public R visit(VariablePackingInfo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

}
