//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	public HashMap<String,classnode> classmap = new HashMap<String,classnode>();
	ArrayList<String> methodmap ;
	ArrayList<String> variablemap;
	ArrayList<String> varTypeMap;
	ArrayList<String> metretmap;
	boolean var = false;
	public HashMap<String,classToPro> classInFormOfTables = new HashMap<String,classToPro>(); 
	
	
	public class classnode{
		public String name;
		public String parentname;
		public ArrayList<String> methodmap;
		public ArrayList<String> variablemap;
		public ArrayList<String> varTypeMap;
		public ArrayList<String> metretmap;
		public classnode(){
			name = null;
			parentname = null;
			methodmap = null;
			variablemap = null;
			varTypeMap = null;
			metretmap = null;
		}
		
	}
	
	LinkedHashMap<String,String> scope = new LinkedHashMap<String,String>();
	String classname;
	String methodname="";
	String fparam;
	String typeIdent;
	
	
	
	
	
	
	
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //
   
//   public void printVars(classToPro c){
//	   ArrayList<String> temp = c.vars;
//	   ArrayList<String> hold = c.varType;
//	   Iterator itr = temp.iterator();
//	   Iterator itrOfType = hold.iterator();
//	      while(itr.hasNext()) {
//	         Object element = itr.next();
//	         Object type = itrOfType.next();
//	         System.out.println(element +  " " + type);
//	      }
//   }
   
//   public void printMets(classToPro c){
//	   ArrayList<String> temp = c.methods;
//	   Iterator itr = temp.iterator();
//	   Iterator itrRet = c.metret.iterator();
//	      while(itr.hasNext()) {
//	         Object element = itr.next();
//	         System.out.println(element + " -> " + itrRet.next());
//	      }
//   }
   
   public class classToPro{
	   public ArrayList<String> methods;
	   public ArrayList<String> vars;
	   public ArrayList<String> varType;
	   public ArrayList<String> metret;
	   public String parentname;
	   public classToPro(){
		   methods = new ArrayList<String>();
		   vars = new ArrayList<String>();
		   varType = new ArrayList<String>();
		   parentname = new String();
		   metret = new ArrayList<String>();
	   }
   }
   
   public classToPro convert(String name, classToPro temp){
	   classnode hold = classmap.get(name);
	   if(hold.parentname != null){
		   temp = convert(hold.parentname, temp);
	   }
	   Iterator itr = hold.variablemap.iterator();
	   Iterator itrOfType = hold.varTypeMap.iterator();
	   while(itr.hasNext()){
		   String s = (String)itr.next();
		   String type = (String)itrOfType.next();
		   s = name + "_" + s;
		   temp.vars.add(s);
		   temp.varType.add(type);
	   }
	   boolean mark = false;
	   Iterator itrOfMethods = hold.methodmap.iterator();
	   Iterator itrOfMetRet = hold.metretmap.iterator();
	   while(itrOfMethods.hasNext()){
		   mark = false;
		   String methodNameInPresentClass = (String)itrOfMethods.next();
		   String methodReturnType = (String)itrOfMetRet.next();
		   Iterator itrOfTempMethods = temp.methods.iterator();
		   while(itrOfTempMethods.hasNext()){
			   String y = (String)itrOfTempMethods.next();
			   String a[]  = y.split("_", 2);
			   if(a[1].equals(methodNameInPresentClass)){
				   int index = temp.methods.indexOf(y);
				   temp.methods.remove(y);
				   temp.metret.remove(index);
				   temp.methods.add(index, (name + "_" + a[1]));
				   temp.metret.add(index, methodReturnType);
				   mark = true;
				   break;
			   }
		   }
		   if(mark){
			   continue;
		   }
		   temp.methods.add(name + "_" + methodNameInPresentClass);
		   temp.metret.add(methodReturnType);
	   }
	   
	   return temp;
   }
   
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      classToPro temp;
      Iterator<String> keySetIterator = classmap.keySet().iterator();
      while(keySetIterator.hasNext()){
    	  String key = keySetIterator.next();
//    	  // has to remove
//    	  System.out.println(key);
//    	  Iterator itr = classmap.get(key).metretmap.iterator();
//    	  Iterator itrmet = classmap.get(key).methodmap.iterator();
//    	  while(itr.hasNext()){
//    		  System.out.println(itrmet.next() + " -> " + itr.next());
//    	  }
    	// has to remove
    	  temp = new classToPro();
    	  temp.parentname = classmap.get(key).parentname;
    	  temp = convert(key , temp);
    	  classInFormOfTables.put(key, temp);
    	}
//      Iterator<String> itr = classInFormOfTables.keySet().iterator();
//      while(itr.hasNext()){
//    	  String key = itr.next();
//    	  System.out.println(key);
//    	  
//    	  System.out.println("vars :-");
//    	  printVars(classInFormOfTables.get(key));
//    	  System.out.println();
//    	  
//    	  System.out.println("methods :-");
//    	  printMets(classInFormOfTables.get(key));
//    	  System.out.println();
//    	}
      _ret = (R)classInFormOfTables;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      classnode c = new classnode();
      var = true;
      n.f0.accept(this);
      n.f1.accept(this);
      methodmap = new ArrayList();
      metretmap = new ArrayList();
      variablemap = new ArrayList();
      varTypeMap = new ArrayList();
      c.parentname = new String();
      c.parentname = null;
      c.name = new String();
      c.name = "Main";
      scope.put(n.f1.f0.toString(),"Main class");
      scope.put(n.f1.f0.toString()+':'+n.f11.f0.toString(),"String[]");
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      c.methodmap = methodmap;
      c.metretmap = metretmap;
      methodmap = null;
      metretmap = null;
      c.variablemap = variablemap;
      c.varTypeMap = varTypeMap;
      variablemap = null;
      varTypeMap = null;
      classmap.put(c.name, c);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      classnode c = new classnode();
      var = true;
      methodmap = new ArrayList();
      metretmap = new ArrayList();
      variablemap = new ArrayList();
      varTypeMap = new ArrayList();
      n.f0.accept(this);
      n.f1.accept(this);
      c.name = new String();
      c.name = n.f1.f0.toString();
      c.parentname = new String();
      c.parentname = null;
      classname = n.f1.f0.toString();
      scope.put(classname,"class");
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      classname="";
      c.methodmap = methodmap;
      c.metretmap = metretmap;
      c.variablemap = variablemap;
      c.varTypeMap = varTypeMap;
      methodmap = null;
      metretmap = null;
      variablemap = null;
      varTypeMap = null;
      classmap.put(c.name, c);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      classnode c = new classnode();
      var = true;
      methodmap = new ArrayList();
      metretmap = new ArrayList();
      variablemap = new ArrayList();
      varTypeMap = new ArrayList();
      n.f0.accept(this);
      n.f1.accept(this);
      c.name = new String();
      c.name = n.f1.f0.toString();
      n.f2.accept(this);
      n.f3.accept(this);
      c.parentname = new String();
      c.parentname = n.f3.f0.toString();
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      c.methodmap = methodmap;
      c.metretmap = metretmap;
      c.variablemap = variablemap;
      c.varTypeMap = varTypeMap;
      methodmap = null;
      metretmap = null;
      variablemap = null;
      varTypeMap = null;
      classmap.put(c.name, c);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      String type="" ;
      switch(n.f0.f0.which)
      {
      	case 0 : type = "int []";
               break;
      	case 1 : type = "boolean";
      	break;
      	case 2 : type = "int";
      	break;
      	case 3 : type = typeIdent;
      	break;
      }
      if(methodname!=""){
    	  scope.put(classname+":"+methodname+":"+n.f1.f0.toString(),type);
      }else{
    	  scope.put(classname+":"+n.f1.f0.toString(),type);
      }
      if(var){
    	  varTypeMap.add(type);
    	  variablemap.add(n.f1.f0.toString());
      }
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      var = false;
      methodname = n.f2.f0.toString();
      n.f0.accept(this);
      n.f1.accept(this);
      String type="" ;
      switch(n.f1.f0.which)
      {
      	case 0 : type = "int []";
               break;
      	case 1 : type = "boolean";
      	break;
      	case 2 : type = "int";
      	break;
      	case 3 : type = typeIdent;
      	break;
      }
      n.f2.accept(this);
      
     
      n.f3.accept(this);
      fparam="";
      n.f4.accept(this);
      scope.put(classname+":"+methodname,'('+fparam+')'+"-->"+type);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      methodmap.add(methodname);
      metretmap.add(type);
      methodname="";
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.f0.accept(this);
      
      String type="" ;
      switch(n.f0.f0.which)
      {
      	case 0 : type = "int []";
               break;
      	case 1 : type = "boolean";
      	break;
      	case 2 : type = "int";
      	break;
      	case 3 : type = typeIdent;
      	break;
      }
      n.f1.accept(this);
      if(fparam!="")
      fparam = fparam+","+type;
      else fparam = type;
      scope.put(classname+":"+methodname+":"+n.f1.f0.toString(),type);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
      typeIdent = n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

}
